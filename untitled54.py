# -*- coding: utf-8 -*-
"""Untitled54.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oAkmhi5Rdu1LJW9lLz4iodf4A5-D_aD7
"""

import streamlit as st
import pandas as pd
import os
from datetime import datetime

FILE_PATH = "insurance_data.csv"

# -------------------- Helper Functions --------------------

def load_data():
    if os.path.exists(FILE_PATH):
        return pd.read_csv(FILE_PATH)
    return pd.DataFrame()

def save_data(new_entry):
    df_new = pd.DataFrame([new_entry])
    if os.path.exists(FILE_PATH):
        df_new.to_csv(FILE_PATH, mode='a', header=False, index=False)
    else:
        df_new.to_csv(FILE_PATH, index=False)

# -------------------- UI Layout --------------------

st.title("Insurance Automation System")

menu = st.sidebar.selectbox("Menu", ["📝 Fill Form", "📊 Admin Dashboard"])

# ==========================================================
# ====================== FORM PAGE =========================
# ==========================================================

if menu == "📝 Fill Form":
    st.header("Insurance Form")

    st.subheader("Personal Details")
    name = st.text_input("Name")
    gender = st.selectbox("Gender", ["Male", "Female", "Other"])
    age_years = st.number_input("Age (Years)", 0, 120, 0)
    age_months = st.number_input("Age (Months)", 0, 11, 0)
    contact = st.text_input("Contact Number")
    insurance_id = st.text_input("Insurance ID Number")
    policy_number = st.text_input("Policy Number")
    address = st.text_area("Current Address")
    occupation = st.text_input("Occupation")
    dob = st.date_input("Date of Birth")

    st.subheader("Hospital / Insurer Details")
    hospital_name = st.text_input("Hospital Name")
    hospital_address = st.text_area("Hospital Address")
    rohini = st.text_input("Rohini ID")
    email = st.text_input("Email ID")

    if st.button("Submit"):
        entry = {
            "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Name": name,
            "Gender": gender,
            "Age (Years)": age_years,
            "Age (Months)": age_months,
            "Contact Number": contact,
            "Insurance ID": insurance_id,
            "Policy Number": policy_number,
            "Current Address": address,
            "Occupation": occupation,
            "Date of Birth": dob,
            "Hospital Name": hospital_name,
            "Hospital Address": hospital_address,
            "Rohini ID": rohini,
            "Hospital Email": email,
        }

        save_data(entry)
        st.success("✅ Form submitted successfully!")
        st.write("### Submitted Data Preview:")
        st.write(pd.DataFrame([entry]))

# ==========================================================
# ====================== ADMIN DASHBOARD ===================
# ==========================================================

if menu == "📊 Admin Dashboard":
    st.header("Admin Dashboard")

    df = load_data()

    if df.empty:
        st.warning("⚠️ No data available yet.")
    else:
        st.subheader("Filter Records")

        # ---- Filters ----
        name_filter = st.text_input("Search by Name")
        gender_filter = st.selectbox("Filter by Gender", ["All", "Male", "Female", "Other"])
        hospital_filter = st.text_input("Filter by Hospital Name")

        date_filter = st.date_input(
            "Filter by Date Range (optional)",
            value=[]
        )

        filtered_df = df.copy()

        # Apply filters
        if name_filter:
            filtered_df = filtered_df[filtered_df["Name"].str.contains(name_filter, case=False)]

        if gender_filter != "All":
            filtered_df = filtered_df[filtered_df["Gender"] == gender_filter]

        if hospital_filter:
            filtered_df = filtered_df[filtered_df["Hospital Name"].str.contains(hospital_filter, case=False)]

        if isinstance(date_filter, list) and len(date_filter) == 2:
            start, end = date_filter
            filtered_df["Timestamp"] = pd.to_datetime(filtered_df["Timestamp"])
            filtered_df = filtered_df[
                (filtered_df["Timestamp"] >= pd.to_datetime(start)) &
                (filtered_df["Timestamp"] <= pd.to_datetime(end))
            ]

        # ---- Display Table ----
        st.write("### Filtered Data")
        st.dataframe(filtered_df)

        # ---- Download Button ----
        csv = filtered_df.to_csv(index=False).encode("utf-8")
        st.download_button("⬇️ Download CSV", csv, "filtered_insurance_data.csv", "text/csv")

        # ---- Summary Statistics ----
        st.subheader("Summary")
        st.write(f"Total Records: **{len(df)}**")
        st.write(f"Filtered Records: **{len(filtered_df)}**")